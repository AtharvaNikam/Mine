-------------------DES------------------------

#initialization

IP = [2, 6, 3, 1, 4, 8, 5, 7]
IPi = [4, 1, 3, 5, 7, 2, 8, 6]
E = [4, 1, 2, 3, 2, 3, 4, 1]
S0 = [
        [1, 0, 3, 2],
        [3, 2, 1, 0],
        [0, 2, 1, 3],
        [3, 1, 3, 2]
     ]
S1 = [
        [0, 1, 2, 3],
        [2, 0, 1, 3],
        [3, 0, 1, 0],
        [2, 1, 0, 3]
     ]
P4 = [2, 4, 3, 1]
P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
P8 = [6, 3, 7, 4, 8, 5, 10, 9]

#Function Definitions

def permutation(pattern, key):
    permuted = ""
    for i in pattern:
        permuted += key[i-1] 
    return permuted

def generate_first(left, right):
    left = left[1:] + left[:1]
    right = right[1:] + right[:1]
    key = left + right
    return permutation(P8, key)

def generate_second(left, right):
    left = left[3:] + left[:3]
    right = right[3:] + right[:3]
    key = left + right
    return permutation(P8, key)

def transform(right, key):
    extended = permutation(E, right)
    print("Extended Permutation: ", extended)
    xor_cipher = bin(int(extended, 2) ^ int(key, 2))[2:].zfill(8)
    print("After applying xor with round key ", xor_cipher)
    xor_left = xor_cipher[:4]
    xor_right = xor_cipher[4:]
    new_left = Sbox(xor_left, S0)
    new_right = Sbox(xor_right, S1)
    print("After applying S-box ")
    print("Left: S0= ", new_left)
    print("Right: S1= ", new_right)
    p4permute = permutation(P4, new_left + new_right)
    print("After applying P4 permutation ", p4permute)
    return p4permute 

def Sbox(data, box):
    row = int(data[0] + data[3], 2)
    column = int(data[1] + data[2], 2)
    return bin(box[row][column])[2:].zfill(2)   

def encrypt(left, right, key):
    cipher = int(left, 2) ^ int(transform(right, key), 2)
    print("After applying final xor= ", bin(cipher)[2:].zfill(4))
    return right, bin(cipher)[2:].zfill(4)

def decrypt(left, right, key):
    plain = int(left, 2) ^ int(transform(right, key), 2)
    print("After applying final xor= ", bin(plain)[2:].zfill(4))
    return right, bin(plain)[2:].zfill(4)


#User Input

key = "1010000010"
plaintext = "01110010"


userInput = False


if userInput == True:
    print("Start the S-DES algorithim.")
    key = input("Enter a 10-bit key: ")
    if len(key) != 10:
        raise Exception("Check the input")


    plaintext = input("Enter 8-bit plaintext: ")
    if len(plaintext) != 8:
        raise Exception("Check the input")


#Encryption Block

print("Input KEY: ", key)
print("Input PLAINTEXT: ", plaintext)

p10key = permutation(P10, key)
print("\nAfter applying permutation P10 on KEY: ",p10key)


print("\nAfter split")
left_key = p10key[:len(p10key)//2]
right_key = p10key[len(p10key)//2:]
print("Left key =: ",left_key,"   Right key =: ",right_key)



first_key = generate_first(left_key, right_key)
second_key = generate_second(left_key, right_key)
print("\nFirst key K1 =: ",first_key)
print("Second key K2=: ",second_key)


print("Encrypt the message")
initial_permutation = permutation(IP, plaintext)
print("Initial Permutation =: ",initial_permutation)

print("\nEncryption Function 1 ")
print("IP Split ")

left_data = initial_permutation[:len(initial_permutation)//2]
right_data = initial_permutation[len(initial_permutation)//2:]
print("Left data =: ",left_data)
print("Right data =: ",right_data)

left, right = encrypt(left_data, right_data, first_key)
print("\nEncrypted data =: ",left+right)


print("\nEncryption Function 2 ")
right, left  = encrypt(left, right, second_key)
print("Encrypted data =: ",left+right)

cipheredText= permutation(IPi, left + right)
print("\nCiphertext =: ",  cipheredText )


#Decryption Block

print("Input KEY: ", key)
print("Above CipherText: ", cipheredText)

p10key = permutation(P10, key)
print("\nAfter applying permutation P10 on KEY: ",p10key)


print("\nAfter split")
left_key = p10key[:len(p10key)//2]
right_key = p10key[len(p10key)//2:]
print("Left key =: ",left_key,"   Right key =: ",right_key)



first_key = generate_first(left_key, right_key)
second_key = generate_second(left_key, right_key)
print("\nFirst key K1 =: ",first_key)
print("Second key K2=: ",second_key)


print("\nDecrypt the message")
initial_permutation = permutation(IP, cipheredText)
print("Initial Permutation =: ",initial_permutation)

print("\nDecryption Function 1 ")
print("IP Split ")
left_data = initial_permutation[:len(initial_permutation)//2]
right_data = initial_permutation[len(initial_permutation)//2:]
print("Left data =: ",left_data)
print("Right data =: ",right_data)

left, right = decrypt(left_data, right_data, second_key)
print("Decrypted data =: ",left+right)

print("\nDecryption Function 2 ")
right,left,    = decrypt(left, right, first_key)
print("Decrypted data =: ",left+right)

print("\nPlain text =: ", permutation(IPi, left + right))

----------------------------Diffie Hellman------------------------------

# public keys shared by both alice and bob
P=int(input("enter the value of P:-"))  
G=int(input( "enter the value of G:-"))


#key selected by Alice
a=int(input( "Private key selected by a:-")) 
#key selected by Bob
b=int(input( "Private key selected by b:-"))

#Alice sends Bob generated key
x = (G ** a) % P
print( " Alice Sends Over Public Chanel: " , x )

#Bob sends Alice generated key
y = (G ** b) % P
print( " Alice Sends Over Public Chanel: " , y )

print( "\n--------------------------------------------\n" )

#Alice genarates secret 
A = (y ** a) % P
print( "Alice Shared Secret: ", A)

#Bob genarates secret 
B = (x ** b) % P
print( "Bob Shared Secret: ", B)

if A == B :
    print("Alice and Bob can communicate further")
else :
     print("Alice and Bob cannot communicate further")


---------------------------RSA----------------------------

# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run i
import math

message = int(input("Enter the number to be encrypted or decrypted :"))
p = int(input("Enter the first prime number  :"))
q = int(input("Enter the second prime number  :"))

n = p * q

z = (p - 1) * (q - 1)
print("the value of z = ",z)



def GCD (e,z) :
    if(e==0):
        return z; 
    else :
        return GCD(z%e,e);
        
e=2
while e < z :
    e += 1
    if (GCD(e,z)==1) :
        break
print("the value of e = ",e)

i=0
while i <= 9 :
    i += 1
    x=1+(i*z)
    if(x % e == 0) :
         d=x/e
         break
print("the value of d = ",d) 

def encrypt(me):
    en = math.pow(me,e)
    c = en % n
    print("Encrypted Message is: ", c)
    return c
    

def decrypt(me):
    de = math.pow(d,c)
    D = de % n
    print("Decrypted Message is: ", D)
    return D
 
print("Original Message is: ", message)
c = encrypt(message)
D = decrypt(message)
    
---------------------------------SAES--------------------------------------

# Description: Simplified AES implementation in Python 3
import sys
 
# S-Box
sBox  = [0x9, 0x4, 0xa, 0xb, 0xd, 0x1, 0x8, 0x5,
         0x6, 0x2, 0x0, 0x3, 0xc, 0xe, 0xf, 0x7]
 
# Inverse S-Box
sBoxI = [0xa, 0x5, 0x9, 0xb, 0x1, 0x7, 0x8, 0xf,
         0x6, 0x0, 0x2, 0x3, 0xc, 0x4, 0xd, 0xe]
 
# Round keys: K0 = w0 + w1; K1 = w2 + w3; K2 = w4 + w5
w = [None] * 6
 
def mult(p1, p2):
    """Multiply two polynomials in GF(2^4)/x^4 + x + 1"""
    p = 0
    while p2:
        if p2 & 0b1:
            p ^= p1
        p1 <<= 1
        if p1 & 0b10000:
            p1 ^= 0b11
        p2 >>= 1
    return p & 0b1111
 
def intToVec(n):
    """Convert a 2-byte integer into a 4-element vector"""
    return [n >> 12, (n >> 4) & 0xf, (n >> 8) & 0xf,  n & 0xf]            
 
def vecToInt(m):
    """Convert a 4-element vector into 2-byte integer"""
    return (m[0] << 12) + (m[2] << 8) + (m[1] << 4) + m[3]
 
def addKey(s1, s2):
    """Add two keys in GF(2^4)"""  
    return [i ^ j for i, j in zip(s1, s2)]
     
def sub4NibList(sbox, s):
    """Nibble substitution function"""
    return [sbox[e] for e in s]
     
def shiftRow(s):
    """ShiftRow function"""
    return [s[0], s[1], s[3], s[2]]
 
def keyExp(key):
    """Generate the three round keys"""
    def sub2Nib(b):
        """Swap each nibble and substitute it using sBox"""
        return sBox[b >> 4] + (sBox[b & 0x0f] << 4)
 
    Rcon1, Rcon2 = 0b10000000, 0b00110000
    w[0] = (key & 0xff00) >> 8
    w[1] = key & 0x00ff
    w[2] = w[0] ^ Rcon1 ^ sub2Nib(w[1])
    w[3] = w[2] ^ w[1]
    w[4] = w[2] ^ Rcon2 ^ sub2Nib(w[3])
    w[5] = w[4] ^ w[3]
 
def encrypt(ptext):
    """Encrypt plaintext block"""
    def mixCol(s):
        return [s[0] ^ mult(4, s[2]), s[1] ^ mult(4, s[3]),
                s[2] ^ mult(4, s[0]), s[3] ^ mult(4, s[1])]    
     
    state = intToVec(((w[0] << 8) + w[1]) ^ ptext)
    state = mixCol(shiftRow(sub4NibList(sBox, state)))
    state = addKey(intToVec((w[2] << 8) + w[3]), state)
    state = shiftRow(sub4NibList(sBox, state))
    return vecToInt(addKey(intToVec((w[4] << 8) + w[5]), state))
     
def decrypt(ctext):
    """Decrypt ciphertext block"""
    def iMixCol(s):
        return [mult(9, s[0]) ^ mult(2, s[2]), mult(9, s[1]) ^ mult(2, s[3]),
                mult(9, s[2]) ^ mult(2, s[0]), mult(9, s[3]) ^ mult(2, s[1])]
     
    state = intToVec(((w[4] << 8) + w[5]) ^ ctext)
    state = sub4NibList(sBoxI, shiftRow(state))
    state = iMixCol(addKey(intToVec((w[2] << 8) + w[3]), state))
    state = sub4NibList(sBoxI, shiftRow(state))
    return vecToInt(addKey(intToVec((w[0] << 8) + w[1]), state))
 
if __name__ == '__main__':
    
     
    plaintext = 0b1101011100101000
    key = 0b0100101011110101
    ciphertext = 0b0010010011101100
    keyExp(key)
    try:
        assert encrypt(plaintext) == ciphertext
    except AssertionError:
        print("Encryption error")
        print(encrypt(plaintext), ciphertext)
        sys.exit(1)
    try:
        assert decrypt(ciphertext) == plaintext
    except AssertionError:
        print("Decryption error")
        print(decrypt(ciphertext), plaintext)
        sys.exit(1)
    print("Test ok!")
    sys.exit()
    


